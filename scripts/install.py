import subprocess
import sys
import os
import platform
import requests
import time
from pathlib import Path
from datetime import timedelta

def log_time(step_name, start_time):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
    elapsed = time.time() - start_time
    print(f"‚è±Ô∏è  {step_name} –∑–∞–Ω—è–ª–æ: {timedelta(seconds=int(elapsed))}")

def run_command(command, check=True, shell_override=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –æ–±–æ–ª–æ—á–∫–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å shell=True (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Windows, False –¥–ª—è Unix)
    if shell_override is None:
        shell_override = (platform.system() == "Windows")
    
    try:
        print(f"üõ†Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        result = subprocess.run(command, shell=shell_override, check=check, capture_output=True, text=True, timeout=300)
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result.stdout}")
        return result.stdout, True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {e.stderr}")
        return e.stderr, False
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {command}")
        return "Timeout", False

def install_ffmpeg():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç FFmpeg –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    step_start = time.time()
    system = platform.system()
    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system}")
    
    if system == "Linux":
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux
        try:
            with open('/etc/os-release') as f:
                content = f.read()
                if 'Ubuntu' in content or 'Debian' in content:
                    print("üü¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Debian (Ubuntu, Debian).")
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ffmpeg
                    run_command("sudo apt update", shell_override=False)
                    run_command("sudo apt install -y ffmpeg", shell_override=False)
                elif 'Fedora' in content or 'CentOS' in content:
                    print("üü• –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ RedHat (Fedora, CentOS).")
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è RPM Fusion –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ffmpeg (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏—è)
                    run_command("sudo dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm", shell_override=False)
                    run_command("sudo dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm", shell_override=False)
                    run_command("sudo dnf install -y ffmpeg", shell_override=False)
                elif 'Arch' in content or 'Manjaro' in content:
                    print("üü™ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Arch (Arch Linux, Manjaro).")
                    run_command("sudo pacman -Sy --noconfirm ffmpeg", shell_override=False)
                else:
                    print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –≤—Ä—É—á–Ω—É—é.")
                    return False
        except FileNotFoundError:
            print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å /etc/os-release. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –≤—Ä—É—á–Ω—É—é.")
            return False

    elif system == "Darwin":  # macOS
        print("üçé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS.")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Homebrew
        brew_check = subprocess.run("command -v brew", shell=True, capture_output=True, text=True)
        if brew_check.returncode != 0:
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew...")
            install_script = '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
            run_command(install_script, shell_override=True)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º FFmpeg —á–µ—Ä–µ–∑ Homebrew
        run_command("brew install ffmpeg", shell_override=True)

    elif system == "Windows":
        print("ü™ü –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Windows.")
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ Chocolatey –∏–ª–∏ Scoop, –ª–∏–±–æ –≤—Ä—É—á–Ω—É—é
        print("üëà –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ (Chocolatey: 'choco install ffmpeg').")
        print("   –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: https://www.ffmpeg.org/download.html#build-windows")
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ Chocolatey, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        choco_check = subprocess.run("choco --version", shell=True, capture_output=True, text=True)
        if choco_check.returncode == 0:
            print("üç´ –û–±–Ω–∞—Ä—É–∂–µ–Ω Chocolatey, –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg...")
            run_command("choco install -y ffmpeg", shell_override=True)
        else:
            print("‚ùå Chocolatey –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –≤—Ä—É—á–Ω—É—é.")
            return False
    else:
        print(f"‚ùì –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ FFmpeg
    ffmpeg_check = subprocess.run("ffmpeg -version", shell=True, capture_output=True, text=True)
    if ffmpeg_check.returncode == 0:
        print(f"‚úÖ FFmpeg —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ—Ä—Å–∏—è:\n{ffmpeg_check.stdout.splitlines()[0]}")
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ FFmpeg –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ PATH.")
        return False
    
    log_time("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ FFmpeg", step_start)
    return True

def install_whisper():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç OpenAI Whisper –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å large-v3.
    """
    step_start = time.time()
    
    print("üìª –£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenAI Whisper...")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç
    output, success = run_command([sys.executable, "-m", "pip", "install", "-U", "openai-whisper"])
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å openai-whisper.")
        return False
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤ whisper –∏ –∑–∞–≥—Ä—É–∑–∏–≤ –º–æ–¥–µ–ª—å base (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Whisper...")
    try:
        import whisper
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        model = whisper.load_model("base")
        print("‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ large-v3 –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        print("‚ÑπÔ∏è  –ú–æ–¥–µ–ª—å 'large-v3' –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ Whisper –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        return False

    log_time("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Whisper", step_start)
    return True

def install_nemo():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç NVIDIA NeMo Toolkit.
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ macOS –∏ Windows.
    """
    step_start = time.time()
    
    print("üéôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NVIDIA NeMo Toolkit...")
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å torch –∏ torchaudio
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pip_commands = [
        [sys.executable, "-m", "pip", "install", "torch", "torchaudio", "torchvision", "--index-url", "https://download.pytorch.org/whl/cpu"],
        [sys.executable, "-m", "pip", "install", "Cython"],
        [sys.executable, "-m", "pip", "install", "'nemo_toolkit[all]'"] # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    ]

    for cmd in pip_commands:
        output, success = run_command(cmd)
        if not success and "nemo_toolkit" in cmd[-1]:
            print("‚ö†Ô∏è  –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ nemo_toolkit[all]. –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")
            # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ [all]
            output, success = run_command([sys.executable, "-m", "pip", "install", "nemo_toolkit"])
            if success:
                print("‚úÖ Nemo Toolkit (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–∂–µ –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é Nemo.")
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker-–æ–±—Ä–∞–∑ NVIDIA NeMo –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
                return False
    
    log_time("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NeMo", step_start)
    return True

def install_ollama_and_gemma():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ollama –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å gemma3:27b.
    """
    step_start = time.time()
    
    system = platform.system()
    print(f"ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –¥–ª—è {system}...")

    if system == "Linux":
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        output, success = run_command("curl -fsSL https://ollama.com/install.sh | sh", shell_override=True)
    elif system == "Darwin":  # macOS
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Homebrew
        brew_check = subprocess.run("command -v brew", shell=True, capture_output=True, text=True)
        if brew_check.returncode == 0:
            output, success = run_command("brew install ollama", shell_override=True)
        else:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
            output, success = run_command("curl -fsSL https://ollama.com/install.sh | sh", shell_override=True)
    elif system == "Windows":
        print("üëà –î–ª—è Windows –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é —Å https://ollama.com/download")
        print("   –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å Ollama –∑–∞–ø—É—â–µ–Ω, –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–∫—Ä–∏–ø—Ç.")
        # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
        input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ Ollama...")
        success = True
    else:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama: {system}")
        success = False

    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama.")
        return False

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä Ollama (–Ω–∞ Linux/macOS –æ–Ω —á–∞—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫ —Å–ª—É–∂–±–∞)
    if system != "Windows":
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
        run_command("ollama serve > /dev/null 2>&1 &", shell_override=True, check=False)
        time.sleep(3) # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä Ollama
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä Ollama –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç.")
        else:
            print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Ollama –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º 200. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.")
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Ollama. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π 'ollama serve'.")
        success = False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å gemma3:27b
    if success:
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ gemma3:27b (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å ~12 –ì–ë –º–µ—Å—Ç–∞)...")
        output, success = run_command("ollama pull gemma3:27b", shell_override=True)
        if success:
            print("‚úÖ –ú–æ–¥–µ–ª—å gemma3:27b —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å gemma3:27b.")
    
    log_time("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", step_start)
    return success

def create_processing_script():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π Python-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
    """
    step_start = time.time()
    
    script_content = '''import subprocess
import requests
import json
import time
import os
import sys
from pathlib import Path
from datetime import timedelta
import threading
import itertools

class Spinner:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    def __init__(self, message="–ó–∞–≥—Ä—É–∑–∫–∞..."):
        self.spinner = itertools.cycle(['-', '/', '|', '\\\\'])
        self.message = message
        self.running = False
        self.thread = None

    def spin(self):
        while self.running:
            sys.stdout.write(next(self.spinner) + ' ' + self.message + '\\r')
            sys.stdout.flush()
            time.sleep(0.1)
            sys.stdout.write('\\r' + ' ' * (len(self.message) + 2) + '\\r')
            sys.stdout.flush()

    def __enter__(self):
        self.running = True
        self.thread = threading.Thread(target=self.spin)
        self.thread.start()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.running = False
        self.thread.join()
        sys.stdout.write('\\r' + ' ' * (len(self.message) + 2) + '\\r')
        sys.stdout.flush()

def log_step_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        elapsed = end_time - start_time
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{func.__name__}': {timedelta(seconds=int(elapsed))}")
        return result
    return wrapper

@log_step_time
def check_ollama_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Ollama"""
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=10)
        return response.status_code == 200
    except requests.exceptions.ConnectionError:
        return False

@log_step_time
def start_ollama_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Ollama –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        with Spinner("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä Ollama..."):
            process = subprocess.Popen(
                ["ollama", "serve"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                start_new_session=True
            )
            time.sleep(5)
            
            for _ in range(10):
                if check_ollama_server():
                    print("‚úÖ –°–µ—Ä–≤–µ—Ä Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                    return process
                time.sleep(2)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Ollama")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ Ollama: {e}")
        return None

@log_step_time
def ensure_gemma_model():
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å Gemma 3 27B –¥–æ—Å—Ç—É–ø–Ω–∞"""
    try:
        with Spinner("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ Gemma 3 27B..."):
            response = requests.get("http://localhost:11434/api/tags")
            models = response.json().get("models", [])
            
            gemma_models = [m for m in models if "gemma3" in m.get("name", "").lower() and "27b" in m.get("name", "")]
            
            if not gemma_models:
                print("üì• –ú–æ–¥–µ–ª—å Gemma 3 27B –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
                subprocess.run(["ollama", "pull", "gemma3:27b"], check=True)
                print("‚úÖ –ú–æ–¥–µ–ª—å Gemma 3 27B —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                print("‚úÖ –ú–æ–¥–µ–ª—å Gemma 3 27B —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return False

@log_step_time
def transcribe_audio(audio_path):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper large-v3"""
    try:
        with Spinner("üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper large-v3..."):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            result = subprocess.run([
                "whisper", audio_path, 
                "--model", "large-v3",
                "--language", "ru",
                "--output_format", "txt"
            ], capture_output=True, text=True, check=True)
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
            base_name = Path(audio_path).stem
            txt_path = f"{base_name}.txt"
            with open(txt_path, 'r', encoding='utf-8') as f:
                transcript = f.read()
        
        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return transcript, txt_path
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None, None

@log_step_time
def summarize_text(text):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Ollama –∏ Gemma 3 27B"""
    try:
        with Spinner("üß† –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemma 3 27B..."):
            prompt = f"""
            –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
            –í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã:
            - –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            - –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
            - –î–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
            - –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
            - –û–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
            
            –¢–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏:
            {text[:12000]}
            """
            
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={
                    "model": "gemma3:27b",
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.3,
                        "top_p": 0.9,
                        "num_ctx": 8192  # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    }
                },
                timeout=60*60*3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
            )
            
            if response.status_code == 200:
                result = response.json()
                summary = result.get("response", "")
                print("‚úÖ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return summary
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
                return None

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

@log_step_time
def save_markdown(summary, output_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Markdown —Ñ–∞–π–ª"""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(summary)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    script_start_time = time.time()
    print("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ\\n")

    if len(sys.argv) < 2:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
        print("   –ü—Ä–∏–º–µ—Ä: python summarize.py audio.m4a")
        sys.exit(1)
    
    audio_path = sys.argv[1]
    if not os.path.exists(audio_path):
        print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª {audio_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä Ollama
    ollama_process = None
    if not check_ollama_server():
        ollama_process = start_ollama_server()
        if not ollama_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            sys.exit(1)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å Gemma –¥–æ—Å—Ç—É–ø–Ω–∞
    if not ensure_gemma_model():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Gemma 3 27B")
        if ollama_process:
            ollama_process.terminate()
        sys.exit(1)
    
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    transcript, transcript_path = transcribe_audio(audio_path)
    if not transcript:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        if ollama_process:
            ollama_process.terminate()
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    summary = summarize_text(transcript)
    if not summary:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
        if ollama_process:
            ollama_process.terminate()
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    base_name = Path(audio_path).stem
    output_path = f"{base_name}_summary.md"
    if save_markdown(summary, output_path):
        print("üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä Ollama, –µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—É—Å–∫–∞–ª–∏
    if ollama_process:
        with Spinner("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä Ollama..."):
            ollama_process.terminate()
            try:
                ollama_process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                ollama_process.kill()
    
    print(f"üìù –ü–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {transcript_path}")

    total_time = time.time() - script_start_time
    print(f"\\nüïê –û–ë–©–ï–ï –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {timedelta(seconds=int(total_time))}")

if __name__ == "__main__":
    main()
'''
    script_filename = "summarize.py"
    try:
        with open(script_filename, 'w', encoding='utf-8') as f:
            f.write(script_content)
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {script_filename}")
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (–¥–ª—è Unix-—Å–∏—Å—Ç–µ–º)
        if platform.system() != "Windows":
            os.chmod(script_filename, 0o755)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç {script_filename}: {e}")
        return False
    
    log_time("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", step_start)
    return True

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
    """
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    script_start_time = time.time()
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    step_times = {}
    
    # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FFmpeg
    print("\n" + "="*50)
    print("1. –£–°–¢–ê–ù–û–í–ö–ê FFMPEG")
    print("="*50)
    step_start = time.time()
    ffmpeg_ok = install_ffmpeg()
    step_times["FFmpeg"] = time.time() - step_start
    
    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Whisper
    print("\n" + "="*50)
    print("2. –£–°–¢–ê–ù–û–í–ö–ê OPENAI WHISPER")
    print("="*50)
    step_start = time.time()
    whisper_ok = install_whisper()
    step_times["Whisper"] = time.time() - step_start
    
    # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NeMo
    print("\n" + "="*50)
    print("3. –£–°–¢–ê–ù–û–í–ö–ê NVIDIA NEMO")
    print("="*50)
    step_start = time.time()
    nemo_ok = install_nemo()
    step_times["NeMo"] = time.time() - step_start
    
    # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –∏ –º–æ–¥–µ–ª–∏ Gemma
    print("\n" + "="*50)
    print("4. –£–°–¢–ê–ù–û–í–ö–ê OLLAMA –ò –ú–û–î–ï–õ–ò GEMMA 3 27B")
    print("="*50)
    step_start = time.time()
    ollama_ok = install_ollama_and_gemma()
    step_times["Ollama"] = time.time() - step_start
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    print("\n" + "="*50)
    print("5. –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–ö–†–ò–ü–¢–ê")
    print("="*50)
    step_start = time.time()
    script_ok = create_processing_script()
    step_times["–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞"] = time.time() - step_start
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    total_time = time.time() - script_start_time
    print("\n" + "="*50)
    print("–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*50)
    print("–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    print(f"  FFmpeg: {'‚úÖ' if ffmpeg_ok else '‚ùå'}")
    print(f"  Whisper: {'‚úÖ' if whisper_ok else '‚ùå'}")
    print(f"  NVIDIA NeMo: {'‚úÖ' if nemo_ok else '‚ùå'}")
    print(f"  Ollama & Gemma3:27b: {'‚úÖ' if ollama_ok else '‚ùå'}")
    print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: {'‚úÖ' if script_ok else '‚ùå'}")
    
    # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    print("\n‚è±Ô∏è  –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –≠–¢–ê–ü–û–í:")
    for step, duration in step_times.items():
        print(f"  {step}: {timedelta(seconds=int(duration))}")
    
    print(f"\nüïê –û–ë–©–ï–ï –í–†–ï–ú–Ø –£–°–¢–ê–ù–û–í–ö–ò: {timedelta(seconds=int(total_time))}")
    
    if all([ffmpeg_ok, whisper_ok, nemo_ok, ollama_ok, script_ok]):
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("\nüìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("   1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, meeting.m4a) –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É.")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, —É–∫–∞–∑–∞–≤ –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É:")
        print("      python summarize.py meeting.m4a")
        print("   3. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ meeting_summary.md")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏.")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é.")
    
    print("\nüí° –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø:")
    print("   - –î–ª—è —Ä–∞–±–æ—Ç—ã Whisper large-v3 —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∫–æ–ª–æ 12 –ì–ë VRAM/–û–ó–£.")
    print("   - –ú–æ–¥–µ–ª—å Gemma3:27b —Ç—Ä–µ–±—É–µ—Ç –æ–∫–æ–ª–æ 12 –ì–ë –º–µ—Å—Ç–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –û–ó–£/VRAM.")
    print("   - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ large-v3.")

if __name__ == "__main__":
    main()